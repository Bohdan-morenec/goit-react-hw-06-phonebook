{"version":3,"sources":["component/FormContact/FormContact.module.scss","App.module.scss","component/ContactsFilter/ContactsFilter.module.scss","redux/contacts/contacts-actions.js","component/FormContact/FormContact.js","component/ContactsFilter/ContactsFilter.js","component/ContactList/ContactList.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","component/ContactList/ContactList.module.scss"],"names":["module","exports","addСontact","createAction","deleteContact","filterContact","FormContact","state","name","number","id","addFormContact","e","currentTarget","value","setState","dominicToretto","props","contactsItems","find","SubmitForm","preventDefault","alert","uuidv4","className","styles","transparent","htmlFor","onSubmit","this","formInner","onChange","type","pattern","title","required","buttom","Component","Function","defaultProps","contacts","connect","items","dispatch","actions","filter","filterContactState","lable","tupe","style","list","filterValue","toLowerCase","includes","filteredArrayContact","map","listItem","button","onClick","App","box","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","itemsReducer","createReducer","payload","todo","filterReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","dulo","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5f81800b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transparent\":\"FormContact_transparent__3Gvyl\",\"formInner\":\"FormContact_formInner__CTn-E\",\"buttom\":\"FormContact_buttom__3KCbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"App_box__2UZTf\",\"title\":\"App_title__qLyac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lable\":\"ContactsFilter_lable__MAAmp\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// export const addСontact = (value) => ({\r\n//   type: \"addСontact\",\r\n//   payload: value,\r\n// });\r\n\r\nexport const addСontact = createAction(\"addСontact\");\r\n\r\n// export const deleteContact = (value) => ({\r\n//   type: \"deleteContact\",\r\n//   payload: value,\r\n// });\r\n\r\nexport const deleteContact = createAction(\"deleteContact\");\r\n\r\n// export const filterContact = (value) => ({\r\n//   type: \"filterContact\",\r\n//   payload: value,\r\n// });\r\n\r\nexport const filterContact = createAction(\"filterContact\");\r\n","import { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./FormContact.module.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\n\r\nclass FormContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    id: \"\",\r\n  };\r\n\r\n  addFormContact = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  dominicToretto = () => {\r\n    return this.props.contactsItems.find(({ name, number }) => {\r\n      return name === this.state.name || number === this.state.number;\r\n    });\r\n  };\r\n\r\n  SubmitForm = (e) => {\r\n    const { name, number } = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    if (this.dominicToretto()) {\r\n      return alert(\"the same name or phone number already exists\");\r\n    }\r\n\r\n    this.props.addСontact({\r\n      name: name,\r\n      number: number,\r\n      id: uuidv4(),\r\n    });\r\n\r\n    this.setState({ name: \"\", number: \"\", id: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        className={styles.transparent}\r\n        htmlFor={uuidv4()}\r\n        onSubmit={this.SubmitForm}\r\n      >\r\n        <div className={styles.formInner}>\r\n          <label>\r\n            Name\r\n            <input\r\n              onChange={this.addFormContact}\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              onChange={this.addFormContact}\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          <button className={styles.buttom} type=\"submit\">\r\n            aad contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nFormContact.propTypes = {\r\n  contactsItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\nFunction.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsItems: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addСontact: (value) => dispatch(actions.addСontact(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContact);\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./ContactsFilter.module.scss\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst ContactsFilter = ({ filterContactState, filter }) => {\r\n  return (\r\n    <input\r\n      className={styles.lable}\r\n      onChange={filterContactState}\r\n      value={filter}\r\n      tupe=\"text\"\r\n      name=\"filter\"\r\n      title=\"Поиск контактов\"\r\n    />\r\n  );\r\n};\r\n\r\nContactsFilter.propTypes = {\r\n  filterContactState: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  filterContactState: (e) =>\r\n    dispatch(actions.filterContact(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsFilter);\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport style from \"./ContactList.module.scss\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst ContactList = ({ deleteContact, filter, contacts }) => {\r\n  const filteredArrayContact = () => {\r\n    const filterValue = filter.toLowerCase();\r\n\r\n    const filterText = (value) => value.toLowerCase().includes(filterValue);\r\n\r\n    return contacts.filter(({ name }) => filterText(name));\r\n  };\r\n\r\n  return (\r\n    <ul className={style.list}>\r\n      {filteredArrayContact().map(({ name, number, id }) => (\r\n        <li className={style.listItem} key={id}>\r\n          <p className={style.name}>\r\n            {name}: <span className={style.number}>{number}</span>\r\n          </p>\r\n          <button\r\n            className={style.button}\r\n            type=\"button\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import \"./App.css\";\nimport { Component } from \"react\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport FormContact from \"./component/FormContact\";\nimport ContactsFilter from \"./component/ContactsFilter\";\nimport ContactList from \"./component/ContactList\";\n\nimport styles from \"./App.module.scss\";\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  //     { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  //     { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  //     { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  //   ],\n\n  //   filter: \"\",\n  // };\n\n  // componentDidUpdate(prevProps, prevState, snapshot) {\n  //   const contactsData = JSON.stringify(this.state.contacts);\n\n  //   if (prevState.contacts !== this.state.contacts) {\n  //     localStorage.setItem(\"contact\", contactsData);\n  //   }\n  // }\n\n  // componentDidMount() {\n  //   const contactsParse = JSON.parse(localStorage.getItem(\"contact\"));\n  //   if (contactsParse !== null) {\n  //     this.setState({ contacts: contactsParse });\n  //   }\n  // }\n\n  // addСontact = ({ name, number }) => {\n  //   const contact = {\n  //     name,\n  //     number,\n  //     id: uuidv4(),\n  //   };\n\n  //   this.setState((prevState) => ({\n  //     contacts: [...prevState.contacts, contact],\n  //   }));\n  // };\n\n  // filteredArrayContact = () => {\n  //   const { filter, contacts } = this.state;\n\n  //   const filterValue = filter.toLowerCase();\n\n  //   const filterText = (value) => value.toLowerCase().includes(filterValue);\n\n  //   return contacts.filter(({ name }) => filterText(name));\n  // };\n\n  // filterContactState = (e) => {\n  //   const { value } = e.currentTarget;\n\n  //   this.setState({ filter: value });\n  // };\n\n  // deleteFormContact = (todoId) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter((todo) => todo.id !== todoId),\n  //   }));\n  // };\n\n  render() {\n    return (\n      <div className={styles.box}>\n        <h1 className={styles.title}>Phonebook</h1>\n        <FormContact />\n        <div>\n          <h2 className={styles.title}>contacts</h2>\n          <ContactsFilter\n          // onChange={this.filterContactState}\n          // stateFilter={this.state.filter}\n          />\n          <ContactList\n          // filteredArrayContact={this.filteredArrayContact}\n          // deleteFormContact={this.deleteFormContact}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport * as actions from \"../../redux/contacts/contacts-actions\";\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"addСontact\":\r\n//       return [...state, payload];\r\n\r\n//     case \"deleteContact\":\r\n//       return state.filter((todo) => todo.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addСontact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter((todo) => todo.id !== payload),\r\n});\r\n\r\n// const filterReducer = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"filterContact\":\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"../redux/contacts/contacts-reducer\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst dulo = { store, persistor };\r\n\r\nexport default dulo;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__fsWrs\",\"listItem\":\"ContactList_listItem__SDhlU\",\"button\":\"ContactList_button__31b_1\",\"name\":\"ContactList_name__HT9Vj\",\"number\":\"ContactList_number__3zPfU\"};"],"sourceRoot":""}